version: '3.8'

services:
  # PostgreSQL Database
  postgre-sql-inmobiscrap:
    image: postgres:15-alpine
    container_name: postgre-sql-inmobiscrap
    restart: unless-stopped
    environment:
      POSTGRES_DB: inmobiscrap_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d inmobiscrap_db -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - inmobiscrap_network

  # Ollama LLM Service - OPTIMIZADO
  ollama-inmobiscrap:
    image: ollama/ollama:latest
    container_name: ollama-inmobiscrap
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_NUM_CTX=16384       # ✅ Aumentado para manejar HTML más grandes
      - OLLAMA_NUM_BATCH=512        # ✅ Batch size para procesamiento
      - OLLAMA_NUM_GPU=0            # ✅ Si no tienes GPU, mejor desactivar
      - OLLAMA_MAX_LOADED_MODELS=1  # ✅ Solo un modelo en memoria
      - OLLAMA_NUM_PARALLEL=1       # ✅ Procesar una petición a la vez
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:11434/ || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s
    networks:
      - inmobiscrap_network
    # Recursos limitados para evitar que consuma toda la memoria
    deploy:
      resources:
        limits:
          memory: 8G  # Ajusta según tu sistema
        reservations:
          memory: 4G
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "ollama serve & 
      sleep 10 && 
      ollama pull llama3.1:8b && 
      ollama pull nomic-embed-text && 
      wait"

  # Redis for Celery
  redis-inmobiscrap:
    image: redis:7-alpine
    container_name: redis-inmobiscrap
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    networks:
      - inmobiscrap_network
    # Configuración de Redis para mejor rendimiento
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Django Backend
  backend-django-inmobiscrap:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: backend-django-inmobiscrap
    restart: unless-stopped
    ports:
      - "8000:8000"
    command: sh -c "python3.11 inmobiscrap/manage.py migrate --noinput && python3.11 inmobiscrap/manage.py runserver 0.0.0.0:8000"
    environment:
      PYTHONPATH: "/app:/app/inmobiscrap"
      
      # Database
      DATABASE_URL: postgresql://postgres:postgres123@postgre-sql-inmobiscrap:5432/inmobiscrap_db
      DB_NAME: inmobiscrap_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_HOST: postgre-sql-inmobiscrap
      DB_PORT: 5432

      # Django
      DJANGO_SECRET_KEY: "dev-secret-key-change-in-production"
      DJANGO_DEBUG: "True"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1,backend-django-inmobiscrap"
      DJANGO_SETTINGS_MODULE: "inmobiscrap.settings"

      # Ollama - OPTIMIZADO
      OLLAMA_BASE_URL: http://ollama-inmobiscrap:11434
      OLLAMA_MODEL: llama3.1:8b
      EMBEDDINGS_MODEL: nomic-embed-text
      OLLAMA_TIMEOUT: 600  # ✅ 10 minutos de timeout

      # Redis/Celery
      REDIS_URL: redis://redis-inmobiscrap:6379/0
      CELERY_BROKER_URL: redis://redis-inmobiscrap:6379/0
      CELERY_RESULT_BACKEND: redis://redis-inmobiscrap:6379/0
      CELERY_TASK_TIME_LIMIT: 900      # ✅ 15 minutos máximo por tarea
      CELERY_TASK_SOFT_TIME_LIMIT: 600 # ✅ Soft limit de 10 minutos

      # Scraping Configuration - OPTIMIZADO
      SCRAPEGRAPH_RATE_LIMIT: 10  # ✅ Reducido para no saturar
      SCRAPEGRAPH_MAX_REQUESTS_PER_HOUR: 15
      SCRAPEGRAPH_RESPECT_ROBOTS_TXT: "True"
      SCRAPEGRAPH_TIMEOUT: 60  # ✅ Timeout para descargas

      # LibreOffice
      LIBREOFFICE_PATH: /usr/bin/libreoffice

      # Logging
      LOG_LEVEL: INFO

    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/static
      - scraping_logs:/app/logs
      - reports_output:/app/reports
    depends_on:
      postgre-sql-inmobiscrap:
        condition: service_healthy
      ollama-inmobiscrap:
        condition: service_started
      redis-inmobiscrap:
        condition: service_healthy
    networks:
      - inmobiscrap_network
    tty: true
    stdin_open: true
    # Recursos para Django
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  # Celery Worker - OPTIMIZADO
  celery-worker-inmobiscrap:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-worker-inmobiscrap
    restart: unless-stopped
    # ✅ Reducido a 1 worker para evitar problemas de concurrencia con Ollama
    command: sh -c "cd /app/inmobiscrap && python3.11 -m celery -A inmobiscrap worker --loglevel=info --concurrency=1 --max-tasks-per-child=10"
    environment:
      # PYTHONPATH - Mismo que Django Backend
      PYTHONPATH: "/app:/app/inmobiscrap"
      
      # Database
      DATABASE_URL: postgresql://postgres:postgres123@postgre-sql-inmobiscrap:5432/inmobiscrap_db
      DB_NAME: inmobiscrap_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_HOST: postgre-sql-inmobiscrap
      DB_PORT: 5432

      # Django
      DJANGO_SECRET_KEY: "dev-secret-key-change-in-production"
      DJANGO_DEBUG: "True"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1,backend-django-inmobiscrap"
      DJANGO_SETTINGS_MODULE: "inmobiscrap.settings"

      # Ollama - OPTIMIZADO
      OLLAMA_BASE_URL: http://ollama-inmobiscrap:11434
      OLLAMA_MODEL: llama3.1:8b
      EMBEDDINGS_MODEL: nomic-embed-text
      OLLAMA_TIMEOUT: 600

      # Redis/Celery - OPTIMIZADO
      REDIS_URL: redis://redis-inmobiscrap:6379/0
      CELERY_BROKER_URL: redis://redis-inmobiscrap:6379/0
      CELERY_RESULT_BACKEND: redis://redis-inmobiscrap:6379/0
      CELERY_TASK_TIME_LIMIT: 900
      CELERY_TASK_SOFT_TIME_LIMIT: 600
      CELERY_WORKER_PREFETCH_MULTIPLIER: 1  # ✅ Solo un task a la vez
      CELERY_ACKS_LATE: "True"              # ✅ Ack después de completar

      # Scraping Configuration
      SCRAPEGRAPH_RATE_LIMIT: 10
      SCRAPEGRAPH_MAX_REQUESTS_PER_HOUR: 15
      SCRAPEGRAPH_RESPECT_ROBOTS_TXT: "True"
      SCRAPEGRAPH_TIMEOUT: 60

      # LibreOffice
      LIBREOFFICE_PATH: /usr/bin/libreoffice

      # Logging
      LOG_LEVEL: INFO

    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/static
      - scraping_logs:/app/logs
      - reports_output:/app/reports
    depends_on:
      postgre-sql-inmobiscrap:
        condition: service_healthy
      redis-inmobiscrap:
        condition: service_healthy
      ollama-inmobiscrap:
        condition: service_started
    networks:
      - inmobiscrap_network
    # Recursos para Celery Worker
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Celery Beat (tareas programadas)
  celery-beat-inmobiscrap:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery-beat-inmobiscrap
    restart: unless-stopped
    command: sh -c "cd /app/inmobiscrap && python3.11 -m celery -A inmobiscrap beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    environment:
      # PYTHONPATH - Mismo que Django Backend
      PYTHONPATH: "/app:/app/inmobiscrap"
      
      # Database
      DATABASE_URL: postgresql://postgres:postgres123@postgre-sql-inmobiscrap:5432/inmobiscrap_db
      DB_NAME: inmobiscrap_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      DB_HOST: postgre-sql-inmobiscrap
      DB_PORT: 5432

      # Django
      DJANGO_SECRET_KEY: "dev-secret-key-change-in-production"
      DJANGO_DEBUG: "True"
      DJANGO_ALLOWED_HOSTS: "localhost,127.0.0.1,backend-django-inmobiscrap"
      DJANGO_SETTINGS_MODULE: "inmobiscrap.settings"

      # Ollama
      OLLAMA_BASE_URL: http://ollama-inmobiscrap:11434
      OLLAMA_MODEL: llama3.1:8b
      EMBEDDINGS_MODEL: nomic-embed-text

      # Redis/Celery
      REDIS_URL: redis://redis-inmobiscrap:6379/0
      CELERY_BROKER_URL: redis://redis-inmobiscrap:6379/0
      CELERY_RESULT_BACKEND: redis://redis-inmobiscrap:6379/0

      # Scraping Configuration
      SCRAPEGRAPH_RATE_LIMIT: 10
      SCRAPEGRAPH_MAX_REQUESTS_PER_HOUR: 15
      SCRAPEGRAPH_RESPECT_ROBOTS_TXT: "True"

      # LibreOffice
      LIBREOFFICE_PATH: /usr/bin/libreoffice

      # Logging
      LOG_LEVEL: INFO

    volumes:
      - .:/app
      - media_files:/app/media
      - static_files:/app/static
      - scraping_logs:/app/logs
      - reports_output:/app/reports
    depends_on:
      postgre-sql-inmobiscrap:
        condition: service_healthy
      redis-inmobiscrap:
        condition: service_healthy
      backend-django-inmobiscrap:
        condition: service_started
    networks:
      - inmobiscrap_network

  # Flower - Monitoreo de Celery
  flower-inmobiscrap:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flower-inmobiscrap
    restart: unless-stopped
    command: sh -c "cd /app/inmobiscrap && python3.11 -m celery -A inmobiscrap flower --port=5555"
    environment:
      PYTHONPATH: "/app:/app/inmobiscrap"
      DJANGO_SETTINGS_MODULE: "inmobiscrap.settings"
      CELERY_BROKER_URL: redis://redis-inmobiscrap:6379/0
      CELERY_RESULT_BACKEND: redis://redis-inmobiscrap:6379/0
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    depends_on:
      redis-inmobiscrap:
        condition: service_healthy
    networks:
      - inmobiscrap_network

# Volúmenes persistentes
volumes:
  postgres_data:
    driver: local
  ollama_models:
    driver: local
  redis_data:
    driver: local
  media_files:
    driver: local
  static_files:
    driver: local
  scraping_logs:
    driver: local
  reports_output:
    driver: local

# Red personalizada
networks:
  inmobiscrap_network:
    driver: bridge